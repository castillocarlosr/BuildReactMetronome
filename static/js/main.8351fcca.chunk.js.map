{"version":3,"sources":["click1.wav","click2.wav","Metronome.js","serviceWorker.js","index.js"],"names":["module","exports","Metronome","props","playClick","state","count","beatsPerMinuteMeasure","click2","play","click1","setState","startStop","playing","clearInterval","timer","setInterval","bpm","handleBpmChange","event","target","value","Audio","this","className","type","min","max","onChange","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uHAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,8NC6G5BC,E,YAtGX,WAAYC,GACX,IAAD,8BACI,4CAAMA,KAgBVC,UAAY,WACX,IAAD,EAC0C,EAAKC,MAD/C,EACUC,MADV,EACiBC,wBAEwB,EAEjC,EAAKC,OAAOC,OAIZ,EAAKC,OAAOD,OAGhB,EAAKE,SAAS,SAAAN,GAAK,MACf,CACIC,OAAQD,EAAMC,MAAO,GAAKD,EAAME,0BAhC5C,EAqCAK,UAAY,WAEL,EAAKP,MAAMQ,SAEVC,cAAc,EAAKC,OACnB,EAAKJ,SAAS,CAAEE,SAAS,MAIzB,EAAKE,MAAQC,YACT,EAAKZ,UACJ,GAAK,EAAKC,MAAMY,IAAO,KAE5B,EAAKN,SACD,CACIL,MAAO,EACPO,SAAS,MArDzB,EA2DAK,gBAAkB,SAAAC,GAEd,IAAMF,EAAME,EAAMC,OAAOC,MAGtB,EAAKhB,MAAMQ,SAEVC,cAAc,EAAKC,OAEnB,EAAKA,MAAQC,YACT,EAAKZ,UACJ,GAAKa,EAAO,KAGjB,EAAKN,SACD,CACIL,MAAO,EACPW,SAKR,EAAKN,SAAS,CAACM,SA9EnB,EAAKZ,MACL,CACIQ,SAAS,EACTP,MAAO,EACPW,IAAK,IACLV,sBAAuB,GAG3B,EAAKG,OAAS,IAAIY,MAAMZ,KACxB,EAAKF,OAAS,IAAIc,MAAMd,KAZ5B,E,sEAsFC,IAAD,EAC2Be,KAAKlB,MAArBQ,EADX,EACWA,QAASI,EADpB,EACoBA,IAEhB,OACI,yBAAKO,UAAU,aACX,yBAAKA,UAAU,cACX,6BAAMP,EAAN,qBACA,2BAAOQ,KAAK,QAAQC,IAAI,KAAKC,IAAI,MAAMN,MAAOJ,EAAKW,SAAUL,KAAKL,mBAEtE,4BAAQW,QAASN,KAAKX,WAAYC,EAAU,OAAS,c,GAlG7CiB,IAAMC,W,MCOVC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAeC,SAASC,eAAe,SD2HjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.8351fcca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/click1.7a7930a2.wav\";","module.exports = __webpack_public_path__ + \"static/media/click2.fe0ded65.wav\";","import React, {Component} from 'react';\nimport './Metronome.css';\nimport click1 from './click1.wav';\nimport click2 from './click2.wav';\n\nclass Metronome extends React.Component \n{\n    constructor(props)\n    {\n        super(props);\n\n        this.state = \n        {\n            playing: false,\n            count: 0,\n            bpm: 120,\n            beatsPerMinuteMeasure: 4\n        };\n\n        this.click1 = new Audio(click1);\n        this.click2 = new Audio(click2);\n        //audio file added here\n        //time to record some clicks.\n    }\n\n    playClick = () =>\n    {\n        const{count, beatsPerMinuteMeasure} = this.state;\n\n        if(count % beatsPerMinuteMeasure === 0)\n        {\n            this.click2.play();\n        }\n        else\n        {\n            this.click1.play();\n        }\n\n        this.setState(state => (\n            {\n                count: (state.count +1) % state.beatsPerMinuteMeasure\n            }\n            ));\n    };\n\n    startStop = () =>\n    {\n        if(this.state.playing)\n        {\n            clearInterval(this.timer);\n            this.setState({ playing: false});\n        }\n        else\n        {\n            this.timer = setInterval(\n                this.playClick,\n                (60 / this.state.bpm) * 1000\n            );\n            this.setState(\n                {\n                    count: 0,\n                    playing: true\n                },\n            );\n        }\n    };\n\n    handleBpmChange = event => //arrow function needed!  Regular function use of 'this' binding would be lost when it gets passed to 'onChange' handler.\n    {\n        const bpm = event.target.value;\n        //this.setState({bpm});\n\n        if(this.state.playing)\n        {\n            clearInterval(this.timer);\n\n            this.timer = setInterval(\n                this.playClick,\n                (60 / bpm) * 1000\n                );\n\n            this.setState(\n                {\n                    count: 0,\n                    bpm\n                });\n        }\n        else\n        {\n            this.setState({bpm});\n        }\n    };\n\n    render()\n    {\n        const{ playing, bpm} = this.state;\n\n        return(\n            <div className=\"metronome\">\n                <div className=\"bpm-slider\">\n                    <div>{bpm} Beats Per Minute</div>\n                    <input type=\"range\" min=\"30\" max=\"240\" value={bpm} onChange={this.handleBpmChange} />\n                </div>\n                <button onClick={this.startStop}>{playing ? 'Stop' : 'Start'}</button>\n            </div>\n        );\n    }\n}\n\nexport default Metronome;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Metronome from './Metronome.js';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Metronome />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}